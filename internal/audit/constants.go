package audit

const (
	commandNameConstant             = "audit"
	commandShortDescription         = "Audit and reconcile local GitHub repositories"
	commandLongDescription          = "Scans git repositories for GitHub remotes and produces audit reports or applies reconciliation actions."
	flagAuditName                   = "audit"
	flagAuditDescription            = "Generate a CSV audit report"
	flagRenameName                  = "rename"
	flagRenameDescription           = "Rename repository directories to match canonical GitHub names"
	flagUpdateRemoteName            = "update-remote"
	flagUpdateRemoteDescription     = "Update origin URLs to match canonical GitHub repositories"
	flagProtocolFromName            = "protocol-from"
	flagProtocolFromDescription     = "Current remote protocol to convert from (git|ssh|https)"
	flagProtocolToName              = "protocol-to"
	flagProtocolToDescription       = "Desired remote protocol to convert to (git|ssh|https)"
	flagDryRunName                  = "dry-run"
	flagDryRunDescription           = "Preview actions without performing changes"
	flagAssumeYesName               = "yes"
	flagAssumeYesShorthand          = "y"
	flagAssumeYesDescription        = "Automatically confirm prompts"
	flagRequireCleanName            = "require-clean"
	flagRequireCleanDescription     = "Require clean worktrees before renaming"
	flagDebugName                   = "debug"
	flagDebugDescription            = "Print debug information while scanning"
	errorMissingOperation           = "specify --audit, or --rename / --update-remote (with optional --dry-run/--yes), or a protocol conversion with --protocol-from/--protocol-to"
	errorInvalidProtocolValue       = "protocol value must be one of git|ssh|https"
	errorProtocolPairIncomplete     = "protocol conversion requires both --protocol-from and --protocol-to"
	errorProtocolPairSame           = "--protocol-from and --protocol-to are the same"
	originRemoteNameConstant        = "origin"
	defaultRootPathConstant         = "."
	debugDiscoveredTemplate         = "DEBUG: discovered %d candidate repos under: %s\n"
	debugCheckingTemplate           = "DEBUG: checking %s\n"
	csvHeaderFinalRepository        = "final_github_repo"
	csvHeaderFolderName             = "folder_name"
	csvHeaderNameMatches            = "name_matches"
	csvHeaderRemoteDefault          = "remote_default_branch"
	csvHeaderLocalBranch            = "local_branch"
	csvHeaderInSync                 = "in_sync"
	csvHeaderRemoteProtocol         = "remote_protocol"
	csvHeaderOriginCanonical        = "origin_matches_canonical"
	csvHeaderTemplate               = "%s,%s,%s,%s,%s,%s,%s,%s\n"
	renamePlanSkipAlready           = "PLAN-SKIP (already named): %s\n"
	renamePlanSkipDirty             = "PLAN-SKIP (dirty worktree): %s\n"
	renamePlanSkipParent            = "PLAN-SKIP (target parent missing): %s\n"
	renamePlanSkipExists            = "PLAN-SKIP (target exists): %s\n"
	renamePlanCaseOnlyTemplate      = "PLAN-CASE-ONLY: %s → %s (two-step move required)\n"
	renamePlanOKTemplate            = "PLAN-OK: %s → %s\n"
	renameErrorAlready              = "ERROR: already named: %s\n"
	renameErrorDirty                = "ERROR: dirty worktree: %s\n"
	renameErrorParent               = "ERROR: target parent missing: %s\n"
	renameErrorExists               = "ERROR: target exists: %s\n"
	renamePromptTemplate            = "Rename '%s' → '%s'? [y/N] "
	renameSkipTemplate              = "SKIP: %s\n"
	renameSuccessTemplate           = "Renamed %s → %s\n"
	renameFailureTemplate           = "ERROR: rename failed for %s → %s\n"
	updateRemoteSkipParse           = "UPDATE-REMOTE-SKIP: %s (error: could not parse origin owner/repo)\n"
	updateRemoteSkipCanonical       = "UPDATE-REMOTE-SKIP: %s (no upstream: no canonical redirect found)\n"
	updateRemoteSkipSame            = "UPDATE-REMOTE-SKIP: %s (already canonical)\n"
	updateRemoteSkipTarget          = "UPDATE-REMOTE-SKIP: %s (error: could not construct target URL)\n"
	updateRemotePlanTemplate        = "PLAN-UPDATE-REMOTE: %s origin %s → %s\n"
	updateRemotePromptTemplate      = "Update 'origin' in '%s' to canonical (%s → %s)? [y/N] "
	updateRemoteDeclined            = "UPDATE-REMOTE-SKIP: user declined for %s\n"
	updateRemoteSuccess             = "UPDATE-REMOTE-DONE: %s origin now %s\n"
	updateRemoteFailure             = "UPDATE-REMOTE-SKIP: %s (error: failed to set origin URL)\n"
	convertErrorOwnerRepo           = "ERROR: cannot derive owner/repo for protocol conversion in %s\n"
	convertErrorTargetURL           = "ERROR: cannot build target URL for protocol '%s' in %s\n"
	convertPlanTemplate             = "PLAN-CONVERT: %s origin %s → %s\n"
	convertPromptTemplate           = "Convert 'origin' in '%s' (%s → %s)? [y/N] "
	convertDeclinedTemplate         = "CONVERT-SKIP: user declined for %s\n"
	convertSuccessTemplate          = "CONVERT-DONE: %s origin now %s\n"
	convertFailureTemplate          = "ERROR: failed to set origin to %s in %s\n"
	gitIsInsideWorkTreeFlagConstant = "--is-inside-work-tree"
	gitTrueOutputConstant           = "true"
	notGitHubRemoteMessageConstant  = "not a github remote"
)
